---
- block:
    - set_fact:
        apply_namespace: apply

    - name: Ensure namespace exists
      k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ apply_namespace }}"

    - name: Add a configmap
      k8s:
        name: "apply-configmap"
        namespace: "{{ apply_namespace }}"
        definition:
          kind: ConfigMap
          apiVersion: v1
          data:
            one: "1"
            two: "2"
            three: "3"
        apply: yes
      register: k8s_configmap

    - name: Check configmap was created
      assert:
        that:
          - k8s_configmap is changed
          - k8s_configmap.result.metadata.annotations|default(False)

    - name: Add same configmap again
      k8s:
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: "apply-configmap"
            namespace: "{{ apply_namespace }}"
          data:
            one: "1"
            two: "2"
            three: "3"
        apply: yes
      register: k8s_configmap_2

    - name: Check nothing changed
      assert:
        that:
          - k8s_configmap_2 is not changed

    - name: Add same configmap again with check mode on
      k8s:
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: "apply-configmap"
            namespace: "{{ apply_namespace }}"
          data:
            one: "1"
            two: "2"
            three: "3"
        apply: yes
      check_mode: yes
      register: k8s_configmap_check

    - name: Check nothing changed
      assert:
        that:
          - k8s_configmap_check is not changed

    - name: Add same configmap again but using name and namespace args
      k8s:
        name: "apply-configmap"
        namespace: "{{ apply_namespace }}"
        definition:
          kind: ConfigMap
          apiVersion: v1
          data:
            one: "1"
            two: "2"
            three: "3"
        apply: yes
      register: k8s_configmap_2a

    - name: Check nothing changed
      assert:
        that:
          - k8s_configmap_2a is not changed

    - name: Update configmap
      k8s:
        definition:
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: "apply-configmap"
            namespace: "{{ apply_namespace }}"
          data:
            one: "1"
            three: "3"
            four: "4"
        apply: yes
      register: k8s_configmap_3

    - name: Ensure that configmap has been correctly updated
      assert:
        that:
          - k8s_configmap_3 is changed
          - "'four' in k8s_configmap_3.result.data"
          - "'two' not in k8s_configmap_3.result.data"

    - name: Add a service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: http
                port: 8080
                targetPort: 8080
        apply: yes
      register: k8s_service

    - name: Add exactly same service
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: http
                port: 8080
                targetPort: 8080
        apply: yes
      register: k8s_service_2

    - name: Check nothing changed
      assert:
        that:
          - k8s_service_2 is not changed

    - name: Change service ports
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: http
                port: 8081
                targetPort: 8081
            type: NodePort
        apply: yes
      register: k8s_service_3

    - name: Check ports are correct
      assert:
        that:
          - k8s_service_3 is changed
          - k8s_service_3.result.spec.ports | length == 1
          - k8s_service_3.result.spec.ports[0].port == 8081

    - name: Insert new service port
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: mesh
                port: 8080
                targetPort: 8080
              - name: http
                port: 8081
                targetPort: 8081
            type: NodePort
        apply: yes
      register: k8s_service_4

    - name: Check ports are correct
      assert:
        that:
          - k8s_service_4 is changed
          - k8s_service_4.result.spec.ports | length == 2
          - k8s_service_4.result.spec.ports[0].port == 8080
          - k8s_service_4.result.spec.ports[1].port == 8081

    - name: Remove new service port (check mode)
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: http
                port: 8081
                targetPort: 8081
            type: NodePort
        apply: yes
      check_mode: yes
      register: k8s_service_check

    - name: Check ports are correct
      assert:
        that:
          - k8s_service_check is changed
          - k8s_service_check.result.spec.ports | length == 1
          - k8s_service_check.result.spec.ports[0].port == 8081

    - name: Remove new service port
      k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: apply-svc
            namespace: "{{ apply_namespace }}"
          spec:
            selector:
              app: whatever
            ports:
              - name: http
                port: 8081
                targetPort: 8081
            type: NodePort
        apply: yes
      register: k8s_service_5

    - name: Check ports are correct
      assert:
        that:
          - k8s_service_5 is changed
          - k8s_service_5.result.spec.ports | length == 1
          - k8s_service_5.result.spec.ports[0].port == 8081

    - name: Add a serviceaccount
      k8s:
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: scale-deploy
            namespace: "{{ apply_namespace }}"

    - name: Add a deployment
      k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: scale-deploy
            namespace: "{{ apply_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ k8s_pod_name }}"
            template: "{{ k8s_pod_template }}"
        wait: yes
        apply: yes
      vars:
        k8s_pod_name: scale-deploy
        k8s_pod_image: gcr.io/kuar-demo/kuard-amd64:v0.10.0-green
        k8s_pod_service_account: scale-deploy
        k8s_pod_ports:
          - containerPort: 8080
            name: http
            protocol: TCP

    - name: Scale the deployment
      k8s_scale:
        api_version: apps/v1
        kind: Deployment
        name: scale-deploy
        namespace: "{{ apply_namespace }}"
        replicas: 0

    - name: Wait for pods to scale down
      pause:
        seconds: 30

    - name: Get pods in scale-deploy
      k8s_info:
        kind: Pod
        label_selectors:
          - app=scale-deploy
        namespace: "{{ apply_namespace }}"
      register: scale_down_deploy_pods

    - name: Ensure that scale down took effect
      assert:
        that:
          - scale_down_deploy_pods.resources | length == 0

    - name: Reapply the earlier deployment
      k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: scale-deploy
            namespace: "{{ apply_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ k8s_pod_name }}"
            template: "{{ k8s_pod_template }}"
        wait: yes
        apply: yes
      vars:
        k8s_pod_name: scale-deploy
        k8s_pod_image: gcr.io/kuar-demo/kuard-amd64:v0.10.0-green
        k8s_pod_service_account: scale-deploy
        k8s_pod_ports:
          - containerPort: 8080
            name: http
            protocol: TCP
      register: reapply_after_scale

    - name: Get pods in scale-deploy
      k8s_info:
        kind: Pod
        label_selectors:
          - app=scale-deploy
        namespace: "{{ apply_namespace }}"
      register: scale_up_deploy_pods

    - name: Ensure that reapply after scale worked
      assert:
        that:
          - reapply_after_scale is changed
          - scale_up_deploy_pods.resources | length == 1

    - name: Remove the serviceaccount
      k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: scale-deploy
            namespace: "{{ apply_namespace }}"

    - name: Update the earlier deployment
      k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: scale-deploy
            namespace: "{{ apply_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ k8s_pod_name }}"
            template: "{{ k8s_pod_template }}"
        wait: yes
        apply: yes
      vars:
        k8s_pod_name: scale-deploy
        k8s_pod_image: gcr.io/kuar-demo/kuard-amd64:v0.10.0-purple
        k8s_pod_service_account: scale-deploy
        k8s_pod_ports:
          - containerPort: 8080
            name: http
            protocol: TCP
      register: deploy_after_serviceaccount_removal
      ignore_errors: yes

    - name: Ensure that updating deployment after service account removal failed
      assert:
        that:
          - deploy_after_serviceaccount_removal is failed

  always:
    - name: Remove namespace
      k8s:
        kind: Namespace
        name: "{{ apply_namespace }}"
        state: absent
