---
- name: Chart tests
  block:
    - name: Create temp directory
      tempfile:
        state: directory
      register: tmpdir

    - name: Set temp directory fact
      set_fact:
        temp_dir: "{{ tmpdir.path }}"

    - name: Check helm_info empty
      helm_info:
        binary_path: "{{ helm_binary }}"
        name: test
        namespace: "{{ helm_namespace }}"
      register: empty_info

    - name: "Assert that no charts are installed with helm_info"
      assert:
        that:
          - empty_info.status is undefined

    - name: "Install fail {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      ignore_errors: yes
      register: install_fail

    - name: "Assert that Install fail {{ chart_test }} from {{ source }}"
      assert:
        that:
          - install_fail is failed
          - "'Error: create: failed to create: namespaces \"' + helm_namespace + '\" not found' in install_fail.stderr"

    - name: "Install {{ chart_test }} from {{ source }} in check mode"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        create_namespace: true
      register: install_check_mode
      check_mode: true

    - name: "Assert that {{ chart_test }} chart is installed from {{ source }} in check mode"
      assert:
        that:
          - install_check_mode is changed
          - install_check_mode.status is defined
          - install_check_mode.status.values is defined

    - name: "Install {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        create_namespace: true
      register: install

    - name: "Assert that {{ chart_test }} chart is installed from {{ source }}"
      assert:
        that:
          - install is changed
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - install.status.status | lower == 'deployed'

    - name: Check helm_info content
      helm_info:
        binary_path: "{{ helm_binary }}"
        name: test
        namespace: "{{ helm_namespace }}"
      register: content_info

    - name: "Assert that {{ chart_test }} is installed from {{ source }} with helm_info"
      assert:
        that:
          - content_info.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - content_info.status.status | lower == 'deployed'

    - name: Check idempotency
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Assert idempotency
      assert:
        that:
          - install is not changed
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - install.status.status | lower == 'deployed'

    - name: "Add vars to {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        values: "{{ chart_test_values }}"
      register: install

    - name: "Assert that {{ chart_test }} chart is upgraded with new var from {{ source }}"
      assert:
        that:
          - install is changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - "install.status['values'].revisionHistoryLimit == 0"

    - name: Check idempotency after adding vars
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        values: "{{ chart_test_values }}"
      register: install

    - name: Assert idempotency after add vars
      assert:
        that:
          - install is not changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - "install.status['values'].revisionHistoryLimit == 0"

    - name: "Remove Vars to {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: "Assert that {{ chart_test }} chart is upgraded with new var from {{ source }}"
      assert:
        that:
          - install is changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - install.status['values'] == {}

    - name: Check idempotency after removing vars
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Assert idempotency after removing vars
      assert:
        that:
          - install is not changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - install.status['values'] == {}

    - name: "Upgrade {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source_upgrade | default(chart_source) }}"
        chart_version: "{{ chart_source_version_upgrade | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: "Assert that {{ chart_test }} chart is upgraded with new version from {{ source }}"
      assert:
        that:
          - install is changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version_upgrade }}"

    - name: Check idempotency after upgrade
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source_upgrade | default(chart_source) }}"
        chart_version: "{{ chart_source_version_upgrade | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Assert idempotency after upgrade
      assert:
        that:
          - install is not changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version_upgrade }}"

    - name: "Remove {{ chart_test }} from {{ source }}"
      helm:
        binary_path: "{{ helm_binary }}"
        state: absent
        name: test
        namespace: "{{ helm_namespace }}"
      register: install

    - name: "Assert that {{ chart_test }} chart is removed from {{ source }}"
      assert:
        that:
          - install is changed

    - name: Check idempotency after remove
      helm:
        binary_path: "{{ helm_binary }}"
        state: absent
        name: test
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Assert idempotency
      assert:
        that:
          - install is not changed

    # Test --replace
    - name: Install chart for replace option
      helm:
        binary_path: "{{ helm_binary }}"
        name: test-0001
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
      register: install

    - name: "Assert that {{ chart_test }} chart is installed from {{ source }}"
      assert:
        that:
          - install is changed

    - name: Remove {{ chart_test }} with --purge
      helm:
        binary_path: "{{ helm_binary }}"
        state: absent
        name: test-0001
        purge: False
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Check if chart is removed
      assert:
        that:
          - install is changed

    - name: Install chart again with same name test-0001
      helm:
        binary_path: "{{ helm_binary }}"
        name: test-0001
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        replace: True
      register: install

    - name: "Assert that {{ chart_test }} chart is installed from {{ source }}"
      assert:
        that:
          - install is changed

    - name: Remove {{ chart_test }} (cleanup)
      helm:
        binary_path: "{{ helm_binary }}"
        state: absent
        name: test-0001
        namespace: "{{ helm_namespace }}"
      register: install

    - name: Check if chart is removed
      assert:
        that:
          - install is changed

    - name: "Install {{ chart_test }} from {{ source }} with values_files"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        values_files:
          - "{{ role_path }}/files/values.yaml"
      register: install

    - name: "Assert that {{ chart_test }} chart has var from {{ source }}"
      assert:
        that:
          - install is changed
          - install.status.status | lower == 'deployed'
          - install.status.chart == "{{ chart_test }}-{{ chart_test_version }}"
          - "install.status['values'].revisionHistoryLimit == 0"

    - name: "Install {{ chart_test }} from {{ source }} with values_files (again)"
      helm:
        binary_path: "{{ helm_binary }}"
        name: test
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        namespace: "{{ helm_namespace }}"
        values_files:
          - "{{ role_path }}/files/values.yaml"
      register: install

    - name: "Assert the result is consistent"
      assert:
        that:
          - not (install is changed)

    - name: Render templates
      helm_template:
        binary_path: "{{ helm_binary }}"
        chart_ref: "{{ chart_source }}"
        chart_version: "{{ chart_source_version | default(omit) }}"
        output_dir: "{{ temp_dir }}"
        values_files:
          - "{{ role_path }}/files/values.yaml"
      register: result

    - assert:
        that:
          - result is changed
          - result is not failed
          - result.rc == 0
          - result.command is match("{{ helm_binary }} template {{ chart_source }}")

    - name: Check templates created
      stat:
        path: "{{ temp_dir }}/{{ chart_test }}/templates"
      register: result

    - assert:
        that:
          result.stat.exists

  always:
    - name: Clean up temp dir
      file:
        state: absent
        path: "{{ temp_dir }}"
      ignore_errors: true

    - name: Remove helm namespace
      k8s:
        api_version: v1
        kind: Namespace
        name: "{{ helm_namespace }}"
        state: absent
        wait: true
        wait_timeout: 180
